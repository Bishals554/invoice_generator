import 'dart:io';
import 'package:flutter/services.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;

class PdfService {
  Future<Uint8List> genrragePdf() async {
    final pdf = pw.Document();
    List<pw.Widget> widgets = [];
    final image =
        (await rootBundle.load('assets/LOGO.png')).buffer.asUint8List();
    final logoArea = pw.Container(
        padding: const pw.EdgeInsets.all(10),
        height: 60,
        color: PdfColor.fromHex("#aaddfbd9"),
        child:
            pw.Row(crossAxisAlignment: pw.CrossAxisAlignment.start, children: [
          pw.Image(pw.MemoryImage(image),
              width: 40, height: 40, fit: pw.BoxFit.cover),
          pw.Padding(
            padding: const pw.EdgeInsets.only(left: 20),
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('Report',
                    style: pw.TextStyle(
                        fontSize: 20, fontWeight: pw.FontWeight.bold)),
                pw.Text('Generated By Bishal',
                    style: pw.TextStyle(
                      fontSize: 10,
                      color: PdfColor.fromHex("#666"),
                    )),
              ],
            ),
          ),
        ]));
    final gap30 = pw.SizedBox(height: 30);
    final balanceArea =
        pw.Row(mainAxisAlignment: pw.MainAxisAlignment.spaceBetween, children: [
      pw.Expanded(
          child: pw.Container(
              padding: const pw.EdgeInsets.all(10),
              height: 70.0,
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColor.fromHex('#f0f0f0')),
              ),
              child: pw.Column(
                  mainAxisAlignment: pw.MainAxisAlignment.center,
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text('Total Credit',
                        style: pw.TextStyle(
                            fontSize: 15, fontWeight: pw.FontWeight.bold)),
                    pw.Text('Rs. 1000',
                        style: pw.TextStyle(
                            color: PdfColors.green,
                            fontWeight: pw.FontWeight.bold)),
                  ]))),
      pw.Expanded(
          child: pw.Container(
              padding: const pw.EdgeInsets.all(10),
              height: 70.0,
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColor.fromHex('#fafafa')),
              ),
              child: pw.Column(
                  mainAxisAlignment: pw.MainAxisAlignment.center,
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text('Total Debit',
                        style: pw.TextStyle(
                            fontSize: 15, fontWeight: pw.FontWeight.bold)),
                    pw.Text('Rs. 1000',
                        style: pw.TextStyle(
                            color: PdfColors.red,
                            fontWeight: pw.FontWeight.bold)),
                  ]))),
      pw.Expanded(
          child: pw.Container(
              padding: const pw.EdgeInsets.all(10),
              height: 70.0,
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColor.fromHex('#fafafa')),
              ),
              child: pw.Column(
                  mainAxisAlignment: pw.MainAxisAlignment.center,
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text('Balance',
                        style: pw.TextStyle(
                            fontSize: 15, fontWeight: pw.FontWeight.bold)),
                    pw.Text('Rs. 1000',
                        style: pw.TextStyle(
                            color: PdfColors.blue,
                            fontWeight: pw.FontWeight.bold)),
                  ]))),
    ]);
    widgets.add(logoArea);
    widgets.add(gap30);
    widgets.add(balanceArea);
    widgets.add(gap30);
    widgets.add(table());
    pdf.addPage(pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        build: (pw.Context context) {
          return widgets;
        }));
    return pdf.save();
  }

  pw.Table table() {
    List<pw.TableRow> rows = [];
    for (int i = 0; i < 10; i++) {
      rows.add(pw.TableRow(children: [
        pw.Container(
            padding: const pw.EdgeInsets.all(10), child: pw.Text('Product $i')),
        pw.Container(
            padding: const pw.EdgeInsets.all(10), child: pw.Text('Rs. 100')),
        pw.Container(padding: const pw.EdgeInsets.all(10), child: pw.Text('1')),
        pw.Container(
            padding: const pw.EdgeInsets.all(10), child: pw.Text('Rs. 100')),
      ]));
    }
    return pw.Table(
        border: pw.TableBorder.all(color: PdfColor.fromHex('#F0F0F0')),
        columnWidths: const <int, pw.TableColumnWidth>{
          0: pw.FlexColumnWidth(100),
          1: pw.FlexColumnWidth(80),
          2: pw.FlexColumnWidth(80),
          6: pw.FlexColumnWidth(90),
          8: pw.FlexColumnWidth(100),
        },
        children: <pw.TableRow>[
          pw.TableRow(
            decoration: pw.BoxDecoration(
              color: PdfColor.fromHex('#F0F0F0'),
            ),
            children: <pw.Widget>[
              pw.Container(
                  padding: const pw.EdgeInsets.all(10),
                  child: pw.Text('Name',
                      style: pw.TextStyle(fontWeight: pw.FontWeight.bold))),
              pw.Container(
                  padding: const pw.EdgeInsets.all(10),
                  child: pw.Text('Price',
                      style: pw.TextStyle(fontWeight: pw.FontWeight.bold))),
              pw.Container(
                  padding: const pw.EdgeInsets.all(10),
                  child: pw.Text('Quantity',
                      style: pw.TextStyle(fontWeight: pw.FontWeight.bold))),
              pw.Container(
                  padding: const pw.EdgeInsets.all(10),
                  child: pw.Text('Total',
                      style: pw.TextStyle(fontWeight: pw.FontWeight.bold))),
            ],
          ),
          ...rows
        ]);
  }

  Future<void> savePdfFile(String fileName, Uint8List byteList) async {
    final output = await getTemporaryDirectory();
    final filePath = '${output.path}/$fileName.pdf';
    final file = File(filePath);
    await file.writeAsBytes(byteList);
    await OpenFile.open(filePath);
  }
}
